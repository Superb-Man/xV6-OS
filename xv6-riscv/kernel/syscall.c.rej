diff a/kernel/syscall.c b/kernel/syscall.c	(rejected hunks)
@@ -6,7 +6,10 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "stat.h"

+int print_args = 0 ;
+int arg_cnt = 0;
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -57,6 +60,13 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+
+  struct proc *p = myproc() ;
+  if(print_args == 1 && p->trapframe->a7 == p->tracer_id) {
+    p->type[n] = 1 ;
+    p->args[n] = *ip ;
+    arg_cnt++ ;
+  }
 }

 // Retrieve an argument as a pointer.
@@ -66,6 +76,13 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+
+  struct proc *p = myproc() ;
+  if(print_args == 1 &&  p->trapframe->a7 == p->tracer_id) {
+    p->type[n] = 2 ;
+    p->args[n] = *ip ;
+    arg_cnt++ ;
+  }
 }

 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -75,8 +92,16 @@ int
 argstr(int n, char *buf, int max)
 {
   uint64 addr;
-  argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  argaddr(n, &addr) ;
+  int x =  fetchstr(addr, buf, max) ;
+
+  struct proc *p = myproc() ;
+  if(print_args == 1 && p->trapframe->a7 == p->tracer_id) {
+    p->type[n] = 3 ;
+    strncpy(p->str[n], buf ,sizeof(buf) -1) ;
+  }
+
+  return x ;
 }

 // Prototypes for the functions that handle system calls.
@@ -101,7 +126,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_shutdown(void) ;
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,19 +153,101 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+[SYS_shutdown] sys_shutdown,
 };

+struct syscall_stat array[sizeof(syscalls)/sizeof(void*) + 1] ;
+int num_of_syscall = sizeof(syscalls)/sizeof(void*) ;
+struct spinlock lk[sizeof(syscalls)/sizeof(void*) + 1] ;
+
+char* names[] = {
+  "",
+  "fork",
+  "exit",
+  "wait",
+  "pipe",
+  "read",
+  "kill",
+  "exec",
+  "fstat",
+  "chdir",
+  "dup",
+  "getpid",
+  "sbrk",
+  "sleep",
+  "uptime",
+  "open",
+  "write",
+  "mknod",
+  "unlink",
+  "link",
+  "mkdir",
+  "close",
+  "trace",
+  "history"
+  "shutdown"
+} ;
+
+//int syscall_arg_count[] = {0,0,1,1,1,3,1,2,2,1,1,0,1,1,0,2,3,3,1,2,1,1,1,2,0};
+
+void print_arguements(int num) {
+  struct proc* p = myproc() ;
+
+  printf("pid: %d, syscall: %s, args: (",p->pid,names[num]);
+  for(int j = 0 ; j < arg_cnt ; j++) {
+    if(p->type[j] == 1) printf("%d", p->args[j]) ;
+    else if(p->type[j] == 2) printf("%p",p->args[j]) ;
+    else {
+      printf("%s", p->str[j]) ;
+    }
+    if(j != arg_cnt - 1) printf(", ") ;
+    else printf(")") ;
+
+  }
+}
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+
+    if(p->tracer_id == num && print_args == 0) {
+      print_args = 1 ;
+    }
+
+    //taking starting
+    int start,end ;
+    acquire(&tickslock) ;
+    start = ticks ;
+    release(&tickslock) ;
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+
     p->trapframe->a0 = syscalls[num]();
+
+    acquire(&tickslock) ;
+    end = ticks ;
+    release(&tickslock) ;
+
+    if(print_args == 1 && p->tracer_id == num) {
+      print_arguements(num) ;
+      printf(", return value %d\n", p->trapframe->a0) ;
+      print_args = 0 ;
+      arg_cnt = 0 ;
+    }
+    acquire(&lk[num]) ;
+
+    array[num].count++ ;
+    array[num].accum_time+= end - start ;
+
+    release(&lk[num]) ;
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
